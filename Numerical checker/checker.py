###Numerical checker of third order condtions of huestrics
###This to ensure that genearted schemes with the huestrics hold numerically under strict third order condtions
import numpy as np

huestrics = {"1":("a[1,0] = b[9]**2",[
    0.010353192801789424, 0.008280757658519874, 0.018426173311949567,
    0.008280757658516777, 0.002174367105545582, 0.08945178978973779,
    0.008280757658517544, 0.002174367105545582, 0.07643173141094187,
    0.06226488983359442, 0.008280757658517612, 0.002174367105545582,
    0.076431731410942, 0.06334091240572876, 0.8562323712883272,
    0.008280757658517617, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572877, 0.002591265543602608, 0.017975957081130277,
    0.008280757658517615, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.0025912655436026227, 0.14161013638303202,
    0.05142119302314059, 0.008280757658517615, 0.002174367105545582,
    0.07643173141094202, 0.06334091240572878, 0.0025912655436026244,
    0.14161013638303271, 0.10349471367071784, 0.26792383586784135,
    0.008280757658517617, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.0025912655436026205, 0.14161013638303244,
    0.10349471367071848, 0.01984989687226824, 0.0011165786582949845,
    0.008280757658517617, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.002591265543602629, 0.14161013638303252,
    0.10349471367071783, 0.01984989687226726, 0.0014129782238071545,
    0.03822375214425407, 0.008280757658517615, 0.002174367105545582,
    0.07643173141094202, 0.06334091240572878, 0.0025912655436026158,
    0.1416101363830327, 0.10349471367071791, 0.019849896872267132,
    0.0014129782238071545, 0.10175064030162033, 0.32630116794911007,
    0.008280757658517615, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.0025912655436026158, 0.14161013638303274,
    0.10349471367071782, 0.01984989687226683, 0.0014129782238071545,
    0.10175064030162027, 0.009700146915903611, 0.005291858529276196,
    0.008280757658517615, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.0025912655436026158, 0.14161013638303266,
    0.10349471367071794, 0.019849896872267247, 0.0014129782238071545,
    0.10175064030162032, 0.00970014691590373, 0.010359509728598209,
    0.03778777617984478, 0.008280757658517615, 0.002174367105545582,
    0.07643173141094202, 0.06334091240572878, 0.0025912655436026158,
    0.14161013638303263, 0.10349471367071797, 0.01984989687226747,
    0.0014129782238071545, 0.10175064030162041, 0.0097001469159039,
    0.010359509728599557, 0.011683848518759808, 0.042170687897232204
]
,[
    0.008280757658517615, 0.002174367105545582, 0.07643173141094202,
    0.06334091240572878, 0.0025912655436026158, 0.1416101363830327,
    0.10349471367071791, 0.019849896872267153, 0.0014129782238071545,
    0.10175064030162038, 0.009700146915903948, 0.010359509728599225,
    0.011683848518759752, 0.3094709876769489, 0.13784810758400443
]),"2":("a[11,0] = a[4,1] + a[4,2]",[0.3675593019535731, 0.06295169728755634, 0.0030263894903966573, 0.06295169728755634, 0.0029229292069855037, 0.013799531956546684, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.025090932021224817, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.5289970886122701, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.018080675116797586, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.5458601133003473, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.012273573975024437, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.3815881107963953, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.0018686223555469481, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.007744426301339289, 0.019025658442241904, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.007744426301339289, 0.016379622476186698, 0.018006007605002296, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.007744426301339289, 0.016379622476186698, 0.0005149957187224255, 0.06886275398843993, 0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.007744426301339289, 0.016379622476186698, 0.0005149957187224255, 0.2736515509582215, 0.270755644001278],[0.06295169728755634, 0.0029229292069855037, 0.019346079841493422, 0.14783294860314986, 0.003929235515487658, 0.08799106498740665, 0.027089988117726845, 0.12663584747298925, 0.00276499651380806, 0.007744426301339289, 0.016379622476186698, 0.0005149957187224255, 0.2736515509582215, 0.1877955604123146, 0.032449056586611846])

}



def lower_triangle_from_flat(flat, s):
    a = np.zeros((s, s))
    idx = 0
    for i in range(1, s):
        for j in range(i):
            a[i, j] = flat[idx]
            idx += 1
    return a

def check_order_conditions(a, b):
    s = len(b)
    c = a.sum(axis=1)
    v1 = np.sum(b)
    v2 = np.sum(b * c)
    v3a = np.sum(b * c ** 2)
    v3b = np.sum([b[i] * np.dot(a[i, :], c) for i in range(s)])
    r1 = abs(v1 - 1.0)
    r2 = abs(v2 - 0.5)
    r3a = abs(v3a - 1.0 / 3.0)
    r3b = abs(v3b - 1.0 / 6.0)
    return (v1, r1), (v2, r2), (v3a, r3a), (v3b, r3b)

tol = 1e-12

print("### Numerical checker of third order conditions of heuristics\n")

for key, (desc, a_list, b_list) in huestrics.items():
    print(f"--- Heuristic {key}: {desc} ---")
    s = 15
    a = lower_triangle_from_flat(a_list, s)
    b = np.array(b_list)
    (v1, r1), (v2, r2), (v3a, r3a), (v3b, r3b) = check_order_conditions(a, b)
    print(f"  Order 1: sum(b) = {v1:.14f} (residual={r1:.1e}) — {'PASS' if r1 < tol else 'FAIL'}")
    print(f"  Order 2: sum(b*c) = {v2:.14f} (residual={r2:.1e}) — {'PASS' if r2 < tol else 'FAIL'}")
    print(f"  Order 3a: sum(b*c^2) = {v3a:.14f} (residual={r3a:.1e}) — {'PASS' if r3a < tol else 'FAIL'}")
    print(f"  Order 3b: sum(b[i]*a[i,j]*c[j]) = {v3b:.14f} (residual={r3b:.1e}) — {'PASS' if r3b < tol else 'FAIL'}")
    if all([r1 < tol, r2 < tol, r3a < tol, r3b < tol]):
        print("  ✅ All 3rd order conditions satisfied!\n")
    else:
        print("  ❌ At least one condition not satisfied.\n")

print("=== Finished ===")
